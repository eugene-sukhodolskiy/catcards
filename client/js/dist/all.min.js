class CardDeck{constructor(e){this.app=e,this.renderContainer=document.querySelector(this.app.config.cardDeckContainer),this.deckRenderContainer=this.renderContainer.querySelector(".card-stack"),this.counterRenderContainer=this.renderContainer.querySelector(".total-cards"),this.renderingInterval=setInterval(()=>{this.render()},this.app.config.renderInterval)}render(){var r=this.app.dataProvider.data.table.cardDeck.countCards;let t="",n=0,a=0,s=0;var i=30<r?1:10<r?2:3;for(let e=0;e<r;e++)n-=i,a+=i,s+=i,t+=`<div class="card" style="transform: translateZ(${n}px) translateX(${a}px) translateY(${s}px)">Карточка ${e}</div>`;this.deckRenderContainer.innerHTML=t,this.counterRenderContainer.innerHTML="Осталось карт: "+r,this.postRender()}postRender(){}}class ClientApp{constructor(){console.log("Start App"),this.config={userListContainer:".player-list",handCardsContainer:".card-list",userBarContainer:".user-bar",cardDeckContainer:".card-deck",renderInterval:500},this.name=localStorage.getItem("name"),document.querySelector("#login-form").addEventListener("submit",e=>{e.preventDefault();var r=e.currentTarget.querySelector('[name="name"]').value,e=e.currentTarget.getAttribute("action")+"?name="+encodeURIComponent(r);fetch(e).then(e=>{if(e.ok)return e.json();throw new Error("Network response was not ok")}).then(e=>{console.log(e.result),document.querySelector("#login-form-popup").classList.remove("show"),localStorage.setItem("name",e.result),this.name=e.result,this.gameInputPoint()}).catch(e=>{console.error("There was a problem with the fetch operation:",e)})}),this.name?this.gameInputPoint():document.querySelector("#login-form-popup").classList.add("show")}gameInputPoint(){this.dataProvider=new DataProvider(this),this.playerList=new PlayerList(this),this.handCards=new HandCards(this),this.userBar=new UserBar(this),this.cardDeck=new CardDeck(this)}stopRendering(){clearInterval(this.playerList.renderingInterval),clearInterval(this.handCards.renderingInterval),clearInterval(this.userBar.renderingInterval),clearInterval(this.cardDeck.renderingInterval)}}document.addEventListener("DOMContentLoaded",e=>{window.app=new ClientApp});class DataProvider{constructor(e){this.app=e,this.url="/all?name="+this.app.name,this.data={},this.request(),setInterval(()=>{this.request()},1e3)}request(){fetch(this.url).then(e=>e.json()).then(e=>{this.data=e.result}).catch(e=>{console.error("DataProvider request error.",e)})}}class HandCards{constructor(e){this.app=e,this.container=document.querySelector(this.app.config.handCardsContainer),this.renderingInterval=setInterval(()=>{this.render()},this.app.config.renderInterval)}render(){var e;let r="";for(e of this.app.dataProvider.data.table.currentPlayer.cards)r+=`
				<div class="card">
			    <div class="card-skin card-skin-${e.skin}"></div>
			  </div>
			`;this.container.innerHTML=r,this.postRender()}postRender(){}}class PlayerList{constructor(e){this.app=e,this.renderContainer=document.querySelector(this.app.config.userListContainer),this.renderingInterval=setInterval(()=>{this.render()},this.app.config.renderInterval)}render(){var e;let r="";for(e of this.app.dataProvider.data.table.players)r+=`
				<div class="player-item">
					<div class="player-avatar">
						${e.name.charAt(0)}
						<div class="player-counter">${e.countCards}</div>
					</div>
					<div class="player-name">${e.name}</div>
				</div>
			`;this.renderContainer.innerHTML=r,this.postRender()}postRender(){}}class UserBar{constructor(e){this.app=e,this.container=document.querySelector(this.app.config.userBarContainer),this.nameContainer=this.container.querySelector(".name"),this.totalCardsContainer=this.container.querySelector(".total-cards"),this.renderingInterval=setInterval(()=>{this.render()},this.app.config.renderInterval)}render(){var e=this.app.dataProvider.data.table.currentPlayer.cards.length,r=this.app.name;this.nameContainer.innerHTML=r,this.totalCardsContainer.innerHTML="Всего карт "+e}postRender(){}}
//# sourceMappingURL=all.min.js.map
