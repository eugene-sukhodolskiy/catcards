{"version":3,"sources":["CardDeck.js","ClientApp.js","DataProvider.js","HandCards.js","PlayerList.js","UserBar.js"],"names":["CardDeck","constructor","app","this","renderContainer","document","querySelector","config","cardDeckContainer","deckRenderContainer","counterRenderContainer","renderingInterval","setInterval","render","renderInterval","cardsCounter","dataProvider","data","table","cardDeck","countCards","let","html","translateZ","translateX","translateY","step","i","innerHTML","postRender","ClientApp","console","log","userListContainer","handCardsContainer","userBarContainer","name","localStorage","getItem","addEventListener","e","preventDefault","currentTarget","value","url","getAttribute","encodeURIComponent","fetch","then","response","ok","json","Error","result","classList","remove","setItem","gameInputPoint","catch","error","add","DataProvider","playerList","PlayerList","handCards","HandCards","userBar","UserBar","stopRendering","clearInterval","window","request","resp","err","container","card","currentPlayer","cards","skin","player","players","charAt","nameContainer","totalCardsContainer","totalCards","length"],"mappings":"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","file":"all.min.js","sourcesContent":["class CardDeck {\n\tconstructor(app) {\n\t\tthis.app = app;\n\t\tthis.renderContainer = document.querySelector(this.app.config.cardDeckContainer);\n\t\tthis.deckRenderContainer = this.renderContainer.querySelector(\".card-stack\");\n\t\tthis.counterRenderContainer = this.renderContainer.querySelector(\".total-cards\");\n\t\t\n\t\tthis.renderingInterval = setInterval(() => {\n\t\t\tthis.render();\n\t\t}, this.app.config.renderInterval);\n\t}\n\n\trender() {\n\t\tconst cardsCounter = this.app.dataProvider.data.table.cardDeck.countCards;\n\n\t\tlet html = ``;\n\t\tlet translateZ = 0;\n\t\tlet translateX = 0;\n\t\tlet translateY = 0;\n\t\tlet step = cardsCounter > 30 ? 1 : (cardsCounter > 10 ? 2 : 3);\n\t\tfor(let i=0; i<cardsCounter; i++) {\n\t\t\ttranslateZ -= step;\n\t\t\ttranslateX += step;\n\t\t\ttranslateY += step;\n\t\t\thtml += `<div class=\"card\" style=\"transform: translateZ(${translateZ}px) translateX(${translateX}px) translateY(${translateY}px)\">Карточка ${i}</div>`\n\t\t}\n\n\t\tthis.deckRenderContainer.innerHTML = html;\n\t\tthis.counterRenderContainer.innerHTML = `Осталось карт: ${cardsCounter}`;\n\n\t\tthis.postRender();\n\t}\n\n\tpostRender() {\n\t\t\n\t}\n}","class ClientApp {\n\tconstructor() {\n\t\tconsole.log(\"Start App\");\n\n\t\t// props\n\t\tthis.config = {\n\t\t\tuserListContainer: \".player-list\",\n\t\t\thandCardsContainer: \".card-list\",\n\t\t\tuserBarContainer: \".user-bar\",\n\t\t\tcardDeckContainer: \".card-deck\",\n\t\t\trenderInterval: 500\n\t\t};\n\n\t\tthis.name = localStorage.getItem(\"name\");\n\n\n\t\tdocument.querySelector(\"#login-form\").addEventListener(\"submit\", e => {\n\t\t\te.preventDefault();\n\t\t\tconst name = e.currentTarget.querySelector(`[name=\"name\"]`).value;\n\t\t\tconst action = e.currentTarget.getAttribute(\"action\");\n\t\t\tconst url = `${action}?name=${encodeURIComponent(name)}`;\n\n\t\t\tfetch(url)\n\t\t\t  .then(response => {\n\t\t\t    if (!response.ok) {\n\t\t\t      throw new Error('Network response was not ok');\n\t\t\t    }\n\t\t\t    return response.json();\n\t\t\t  })\n\t\t\t  .then(data => {\n\t\t\t    console.log(data.result);\n\n\t\t\t    document.querySelector(\"#login-form-popup\").classList.remove(\"show\");\n\t\t\t    localStorage.setItem(\"name\", data.result);\n\t\t\t    this.name = data.result;\n\t\t\t    this.gameInputPoint();\n\t\t\t  })\n\t\t\t  .catch(error => {\n\t\t\t    console.error('There was a problem with the fetch operation:', error);\n\t\t\t  });\n\n\t\t});\n\n\t\t\t// document.querySelector(\"#login-form-popup\").classList.add(\"show\");\n\t\tif(!this.name) {\n\t\t\tdocument.querySelector(\"#login-form-popup\").classList.add(\"show\");\n\t\t} else {\n\t    this.gameInputPoint();\t\n\t\t}\n\t}\n\n\tgameInputPoint() {\n\t\tthis.dataProvider = new DataProvider(this);\n\t\tthis.playerList = new PlayerList(this);\n\t\tthis.handCards = new HandCards(this);\n\t\tthis.userBar = new UserBar(this);\n\t\tthis.cardDeck = new CardDeck(this);\n\t}\n\n\tstopRendering() {\n\t\tclearInterval(this.playerList.renderingInterval);\n\t\tclearInterval(this.handCards.renderingInterval);\n\t\tclearInterval(this.userBar.renderingInterval);\n\t\tclearInterval(this.cardDeck.renderingInterval);\n\t}\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", e => {\n\twindow.app = new ClientApp();\n});","class DataProvider {\n\tconstructor(app) {\n\t\tthis.app = app;\n\t\tthis.url = `/all?name=${this.app.name}`;\n\t\tthis.data = {};\n\n\t\tthis.request();\n\n\t\tsetInterval(() => {\n\t\t\tthis.request();\n\t\t}, 1000);\n\t}\n\n\trequest() {\n\t\tfetch(this.url)\n\t\t\t.then(resp => resp.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.data = data.result;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error(\"DataProvider request error.\", err);\n\t\t\t});\n\t}\n}","class HandCards {\n\tconstructor(app) {\n\t\tthis.app = app;\n\t\tthis.container = document.querySelector(this.app.config.handCardsContainer);\n\n\t\tthis.renderingInterval = setInterval(() => {\n\t\t\tthis.render();\n\t\t}, this.app.config.renderInterval);\n\t}\n\n\trender() {\n\t\tconst cards = this.app.dataProvider.data.table.currentPlayer.cards;\n\n\t\tlet html = ``;\n\t\tfor(let card of cards) {\n\t\t\thtml += `\n\t\t\t\t<div class=\"card\">\n\t\t\t    <div class=\"card-skin card-skin-${card.skin}\"></div>\n\t\t\t  </div>\n\t\t\t`;\n\t\t}\n\n\t\tthis.container.innerHTML = html;\n\t\tthis.postRender();\n\t}\n\n\tpostRender() {\n\n\t}\n}","class PlayerList {\n\tconstructor(app) {\n\t\tthis.app = app;\n\t\tthis.renderContainer = document.querySelector(this.app.config.userListContainer);\n\t\t\n\t\tthis.renderingInterval = setInterval(() => {\n\t\t\tthis.render();\n\t\t}, this.app.config.renderInterval);\n\t}\n\n\trender() {\n\t\tconst players = this.app.dataProvider.data.table.players;\n\n\t\tlet html = ``;\n\t\tfor(let player of players) {\n\t\t\thtml += `\n\t\t\t\t<div class=\"player-item\">\n\t\t\t\t\t<div class=\"player-avatar\">\n\t\t\t\t\t\t${player.name.charAt(0)}\n\t\t\t\t\t\t<div class=\"player-counter\">${player.countCards}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"player-name\">${player.name}</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tthis.renderContainer.innerHTML = html;\n\t\tthis.postRender();\n\t}\n\n\tpostRender() {\n\n\t}\n}","class UserBar {\n\tconstructor(app) {\n\t\tthis.app = app;\n\t\tthis.container = document.querySelector(this.app.config.userBarContainer);\n\t\tthis.nameContainer = this.container.querySelector(\".name\");\n\t\tthis.totalCardsContainer = this.container.querySelector(\".total-cards\");\n\n\t\tthis.renderingInterval = setInterval(() => {\n\t\t\tthis.render();\n\t\t}, this.app.config.renderInterval);\n\t}\n\n\trender() {\n\t\tconst totalCards = this.app.dataProvider.data.table.currentPlayer.cards.length;\n\t\tconst name = this.app.name;\n\n\t\tthis.nameContainer.innerHTML = name;\n\t\tthis.totalCardsContainer.innerHTML = `Всего карт ${totalCards}`;\n\t}\n\n\tpostRender() {\n\n\t}\n}"]}